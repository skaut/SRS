<?xml version="1.0" encoding="UTF-8" ?>
<project name="SRS" basedir="." default="main">
    <property name="tempDir" value="temp"/>
    <target name="main" description="Runs tests and prepares deployable tarball">
        <exec command="composer install" passthru="true"/>
        <phingcall target="static-analysis"/>
        <phingcall target="coding-standard"/>
        <exec command="php www/index.php orm:validate-schema --skip-sync"/>
        <phingcall target="tests"/>
    </target>

    <target name="prepare-tarball" description="Prepares deployable tarball with everything built">
        <exec command="git rev-parse --short HEAD" outputProperty="build.hash"/>
        <property name="build.dir" value="${tempDir}/builds/${build.hash}"/>

        <exec command="yarn install" passthru="true"/>
        <exec command="yarn build" passthru="true"/>

        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
        <copy todir="${build.dir}">
            <fileset dir=".">
                <include name="app/**"/>
                <include name="backup/**"/>
                <include name="log/**"/>
                <include name="migrations/**"/>
                <include name="temp/**"/>
                <include name="vendor/**"/>
                <include name="www/**"/>
                <include name="composer.*"/>
                <exclude name="app/config/*local.neon"/>
                <exclude name="**/.gitignore"/>
            </fileset>
        </copy>

        <property environment="env"/>

        <copy file="./app/config/production.local.neon" tofile="${build.dir}/app/config/local.neon">
            <filterchain>
                <replacetokens begintoken="__" endtoken="__">
                    <token key="CONFIG_SKAUTIS_APPLICATION_ID" value="${env.CONFIG_SKAUTIS_APPLICATION_ID}"/>
                    <token key="CONFIG_SKAUTIS_TEST_MODE" value="${env.CONFIG_SKAUTIS_TEST_MODE}"/>
                    <token key="CONFIG_DATABASE_HOST" value="${env.CONFIG_DATABASE_HOST}"/>
                    <token key="CONFIG_DATABASE_USER" value="${env.CONFIG_DATABASE_USER}"/>
                    <token key="CONFIG_DATABASE_PASSWORD" value="${env.CONFIG_DATABASE_PASSWORD}"/>
                    <token key="CONFIG_DATABASE_NAME" value="${env.CONFIG_DATABASE_NAME}"/>
                    <token key="CONFIG_MAIL_SMTP" value="${env.CONFIG_MAIL_SMTP}"/>
                    <token key="CONFIG_MAIL_HOST" value="${env.CONFIG_MAIL_HOST}"/>
                    <token key="CONFIG_MAIL_PORT" value="${env.CONFIG_MAIL_PORT}"/>
                    <token key="CONFIG_MAIL_USERNAME" value="${env.CONFIG_MAIL_USERNAME}"/>
                    <token key="CONFIG_MAIL_PASSWORD" value="${env.CONFIG_MAIL_PASSWORD}"/>
                    <token key="CONFIG_MAIL_SECURE" value="${env.CONFIG_MAIL_SECURE}"/>
                    <token key="CONFIG_RECAPTCHA_SITE_KEY" value="${env.CONFIG_RECAPTCHA_SITE_KEY}"/>
                    <token key="CONFIG_RECAPTCHA_SECRET_KEY" value="${env.CONFIG_RECAPTCHA_SECRET_KEY}"/>
                </replacetokens>
                <expandproperties/>
            </filterchain>
        </copy>

        <exec command="composer --working-dir=${build.dir} install
                        --no-interaction
                        --optimize-autoloader
                        --classmap-authoritative
                        --no-dev"
              passthru="true"/>

        <delete>
            <fileset dir="${build.dir}">
                <!-- Temp files -->
                <include name="temp/**"/>

                <!-- Logs -->
                <include name="log/**"/>

                <!-- Webloader -->
                <include name="www/webtemp/**"/>
                <exclude name="**/.htaccess"/>
            </fileset>
        </delete>

        <tar destfile="${build.dir}.tar.gz" compression="gzip">
            <fileset dir="${tempDir}/builds">
                <include name="${build.hash}/**"/>
            </fileset>
        </tar>

        <delete dir="${build.dir}" />
    </target>

    <target name="deploy:ssh">
        <echo message="${comment}..."/>
        <echo message="${command}"/>
        <exec command="ssh ${deploy.ssh.target} -p ${deploy.ssh.port} '${command}'" passthru="true" checkreturn="true"/>
    </target>

    <target name="deploy:copy-tarball">
        <property name="command" value="scp -P ${port} ${file} '${target}:${toDirectory}'"/>
        <echo message="Copying files to ${deploy.ssh.target}"/>
        <echo message="${command}"/>
        <exec command="${command}" passthru="true" checkreturn="true"/>
    </target>

    <target name="deploy:cleanup">
        <echo message="Getting previous releases"/>

        <property name="command" value="echo $(ssh -p ${deploy.ssh.port} ${deploy.ssh.target} 'ls ${deploy.releasesDir}' | grep -v '^${deploy.releaseHash}$')"/>
        <echo message="${command}"/>
        <exec outputProperty="previousReleases" command="${command}" checkreturn="true"/>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Deleting files"/>
            <property name="command" value="cd ${deploy.releasesDir} &amp;&amp; rm -rf ${previousReleases}"/>
        </phingcall>
    </target>

    <target name="deploy">
        <tstamp/>

        <!-- Prepare variables -->
        <property environment="env"/>
        <property name="deploy.workDir" refid="env.DEPLOY_DIRECTORY"/>
        <property name="deploy.releasesDir" value="${deploy.workDir}/releases"/>
        <exec command="git rev-parse --short HEAD" outputProperty="build.hash"/>
        <property name="deploy.lebeda" refid="env.DEPLOY_LEBEDA"/>
        <property name="deploy.ssh.host" refid="env.DEPLOY_SSH_HOST"/>
        <property name="deploy.ssh.username" refid="env.DEPLOY_SSH_USERNAME"/>
        <property name="deploy.ssh.port" refid="env.DEPLOY_SSH_PORT"/>
        <property name="deploy.ssh.target" value="${deploy.ssh.username}@${deploy.ssh.host}"/>
        <property name="deploy.releaseHash" value="${DSTAMP}-${TSTAMP}-${build.hash}"/>
        <property name="deploy.release" value="${deploy.releasesDir}/${deploy.releaseHash}"/>

        <!-- Build tarball -->
        <phingcall target="prepare-tarball">
            <property name="build.hash" value="${deploy.releaseHash}"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Creating releases directory if not exists"/>
            <property name="command" value="mkdir -p ${deploy.releasesDir}"/>
        </phingcall>

        <phingcall target="deploy:copy-tarball">
            <property name="target" value="${deploy.ssh.target}"/>
            <property name="port" value="${deploy.ssh.port}"/>
            <property name="file" value="${tempDir}/builds/${deploy.releaseHash}.tar.gz"/>
            <property name="toDirectory" value="${deploy.releasesDir}"/>
        </phingcall>

        <property name="tarball" value="${deploy.release}.tar.gz"/>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Extracting tarball to release directory"/>
            <property name="command" value="tar -xzf ${tarball} -C ${deploy.releasesDir}"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Removing tarball"/>
            <property name="command" value="rm ${tarball}"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Copying custom CSS"/>
            <property name="command" value="cp ${deploy.workDir}/www/css/web/style.css ${deploy.release}/www/css/web || true"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Copying old log directory"/>
            <property name="command" value="cp -r ${deploy.workDir}/www/../log ${deploy.release} || true"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Copying old backup directory"/>
            <property name="command" value="cp -r ${deploy.workDir}/www/../backup ${deploy.release} || true"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Copying old img directory"/>
            <property name="command" value="cp -r ${deploy.workDir}/www/img ${deploy.release}/www || true"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Copying old files directory"/>
            <property name="command" value="cp -r ${deploy.workDir}/www/files ${deploy.release}/www || true"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Copying old menu template"/>
            <property name="command" value="cp -r ${deploy.workDir}/www/../app/WebModule/Presenters/templates/includes/main_menu.latte ${deploy.release}/app/WebModule/Presenters/templates/includes/ || true"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Setting access rights for temp directory"/>
            <property name="command" value="chmod -R 777 ${deploy.release}/temp"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Setting access rights for log directory"/>
            <property name="command" value="chmod -R 777 ${deploy.release}/log"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Setting access rights for backup directory"/>
            <property name="command" value="chmod -R 777 ${deploy.release}/backup"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Setting access rights for files directory"/>
            <property name="command" value="chmod -R 777 ${deploy.release}/www/files"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Setting access rights for webtemp directory"/>
            <property name="command" value="chmod -R 777 ${deploy.release}/www/webtemp"/>
        </phingcall>

        <phingcall target="deploy:app-command">
            <property name="comment" value="Generating doctrine proxies"/>
            <property name="command" value="orm:generate-proxies"/>
        </phingcall>

        <phingcall target="deploy:app-command">
            <property name="comment" value="Backing up database"/>
            <property name="command" value="app:database:backup"/>
        </phingcall>

        <phingcall target="deploy:app-command">
            <property name="comment" value="Running database migrations"/>
            <property name="command" value="migrations:migrate --no-interaction"/>
        </phingcall>

        <phingcall target="deploy:ssh">
            <property name="comment" value="Swapping release to ${deploy.releaseHash}"/>
            <property name="command" value="rm -rf ${deploy.workDir}/www &amp;&amp; ln -s ${deploy.release}/www ${deploy.workDir}/www"/>
        </phingcall>

        <phingcall target="deploy:cleanup"/>
    </target>

    <target name="deploy:app-command">
        <condition property="phpCommand"
                   value="php81-cli &quot;${deploy.release}/www/console.php ${command}&quot;"
                   else="php8.1 ${deploy.release}/www/console.php ${command}">
            <equals arg1="${deploy.lebeda}" arg2="true"/>
        </condition>
        <phingcall target="deploy:ssh">
            <property name="command" value="${phpCommand}"/>
        </phingcall>
    </target>

    <target name="tests-unit">
        <exec command="vendor/bin/codecept run unit" passthru="true" checkreturn="true"/>
    </target>

    <target name="tests-integration">
        <exec command="vendor/bin/codecept run integration" passthru="true" checkreturn="true"/>
    </target>

    <target name="tests-performance">
        <exec command="vendor/bin/codecept run performance" passthru="true" checkreturn="true"/>
    </target>

    <target name="tests">
        <phingcall target="tests-unit"/>
        <phingcall target="tests-integration"/>
    </target>

    <target name="tests-with-coverage">
        <exec command="php -d zend_extension=xdebug.so -d xdebug.mode=coverage vendor/bin/codecept run unit,integration --coverage-xml"
              passthru="true" checkreturn="true"/>
    </target>

    <target name="static-analysis">
        <exec command="php -d memory_limit=1024M vendor/bin/phpstan analyse -l 6 -c phpstan.neon app --no-progress"
              passthru="true" checkreturn="true"/>
    </target>

    <target name="coding-standard">
        <exec command="vendor/bin/phpcs" passthru="true" checkreturn="true"/>
    </target>
</project>
